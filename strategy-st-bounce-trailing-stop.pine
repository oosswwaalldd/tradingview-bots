// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Ossy1717

//@version=4
strategy("(Strategy) ST Bounce (trailing stop)", overlay = true, initial_capital = 1000, default_qty_value = 1000, default_qty_type = strategy.cash, process_orders_on_close=true)

// Inputs //
tradeDirection = input(defval = "All", title = "Long, Short or All Setups?", options = ["All", "Longs", "Shorts"])
fromDate = input(title="From Date", type=input.time, defval=timestamp("01 Jan 2021 00:00 -0400"))
showTrailingStopLine = input(defval = "No", title = "Show Trailing Stop Line", options = ["Yes", "No"])
trailingStopPerc = input(defval = 1, title = "Trailing SL %", minval = .1, maxval = 100, step = .1) / 100
stAtrPeriod = input(10, "ATR Length")
stFactor = input(3, "Factor")
gap = input(defval = 1, title = "Price Gap Factor", minval = 0, maxval = 100, step = .1, tooltip="Gap between price and ST line") / 100
// Inputs //

// ST
[supertrend, direction] = supertrend(stFactor, stAtrPeriod)

// Helpers
calculate_price_gap(isLong) => 
	retValue = false
	// If gap factor is 0, means entering when bar touches the ST line
	if(isLong)
		retValue := low <= supertrend * (1 + gap)
	else
		retValue := high >= supertrend * (1 - gap)
	retValue

// Conditions
timePeriod = time >= fromDate
notInTrade = strategy.position_size == 0
upTrend = direction < 0 
downTrend = direction > 0
goLong = notInTrade and timePeriod and upTrend and calculate_price_gap(true) and (tradeDirection == "All" or tradeDirection == "Longs")
goShort = notInTrade and timePeriod and downTrend and calculate_price_gap(false) and (tradeDirection == "All" or tradeDirection == "Shorts")

// Visuals
// Debug //
// bodyMiddle = plot((open + close) / 2, display=display.none)
// upTrend = plot(direction < 0 ? supertrend : na, "Up Trend", color = color.green, style=plot.style_linebr)
// downTrend = plot(direction < 0? na : supertrend, "Down Trend", color = color.red, style=plot.style_linebr)
// fill(bodyMiddle, upTrend, color.new(color.green, 90), fillgaps=false)
// fill(bodyMiddle, downTrend, color.new(color.red, 90), fillgaps=false) 
// Debug //

// Determine trail stop loss prices
longStopPrice = 0.0, shortStopPrice = 0.0

longStopPrice := if (strategy.position_size > 0)
    stopValue = low * (1 - trailingStopPerc)
    max(stopValue, longStopPrice[1])
else
    0

shortStopPrice := if (strategy.position_size < 0)
    stopValue = high * (1 + trailingStopPerc)
    min(stopValue, shortStopPrice[1])
else
    999999
        
// Long entries
strategy.entry(id = "long", long = strategy.long, when = goLong)
strategy.exit("exit", "long", stop=longStopPrice)

// Short entries
strategy.entry(id = "short", long = strategy.short, when = goShort)
strategy.exit("exit", "short", stop=shortStopPrice)

// Plot stop loss values for confirmation
longTrailingStopLine = plot(series=(showTrailingStopLine == "Yes" and strategy.position_size > 0) ? longStopPrice : na,
     color=color.orange, style=plot.style_stepline,
     linewidth=1, title="Long Trail Stop")
     
shortTrailingStopLine = plot(series=(showTrailingStopLine == "Yes" and strategy.position_size < 0) ? shortStopPrice : na,
     color=color.orange, style=plot.style_stepline,
     linewidth=1, title="Short Trail Stop")
     
// Entry line
entryPlot = plot(low, color=color.rgb(0, 0, 0, 100), style=plot.style_linebr, linewidth=1)

// SL area fill
fill(longTrailingStopLine, entryPlot, color=color.orange)
fill(entryPlot, shortTrailingStopLine, color=color.orange)

    